########
# Bugs #
########

############
# Features #
############

* Add a function to print out ASTs in dot language. (ast.rb)
* Add support for parentheses in CFGs.
* Give generated empty productions an associativity and precedence of (left, 0).  This will make the ?, *, and + operators greedy.  Provide an option to turn this off.  This is motivated by the 'A B? B?' example.  Make sure this works as expected with 'B? B' when parsing 'B' (meaning that B? is nil and B hold the value).
* Add support for arrays of objects.  This should support matching (e.g. `on [:fib, Integer]` or `on [Integer, String]`. (visitor.rb)
* Allow blocks to be passed to the `on` clauses of the Visitor class. (visitor.rb)
* Support matching literals. (visitor.rb)
* Add the ability to print out grammars in a textual form. (cfg.rb)
* Make the classes representing LLVM types into modules and then in the cg/value.rb file extend each of the classes representing LLVM values with the appropriate type module.  This will require changes to the documentation and Kazoo tutorial if successful. (cg/types.rb)
* Add ability to set tail call info on call instructions. (cg/value.rb)
* Convert to Ruby 2.0 syntax.
	* Move to lazy enumerators.
	* Keyword arguments.
	* Nested methods.
	* New lambda syntax.
	* New hash syntax.
	* Inject methods.
* Update the documentation to use the @overloaded tag.
* Update to LLVM 3.2.
* Add a way of setting a default lexer class for a parser. (parser.rb)
* Allow a parser to accept strings as input and then use either a provided lexer or the default lexer to lex the string (parser.rb)
* Allow the first argument of the associativity methods to be an integer to be used as the value for those tokens.  an error should be raised if associativity values are given in a non-increasing order. (parser.rb)
* Investigate a better way of storing name and type information for values and children, as well as better ways to define the accessors. (ast.rb)
* Figure out what an AssemblyAnnotationWriter is and what it is used for.

###############
# Crazy Ideas #
###############

* Add an optimization function for grammars.  One example optimization would be replacing nonterminals that only produce a single item.  Kind of like constant and reference propagation.  Another optimization would be looking for different productions that have different left-hand side symbols but the same right-hand side. (parser.rb, cfg.rb)
* Composable parsers. (parser.rb)
* Add functionality to automatically add lexical scoping/binding to an AST.
* Make the parser able to parse a single token at a time, thus allowing the lexer to be changed in the middle of parsing. (parser.rb)
* Single token at a time lexer. (lexer.rb)
* Change it so lexers can be instantiated with a string or file to lex. (lexer.rb)
* Composable lexers. (lexer.rb)

#############
# Semantics #
#############

* Fill in the remaining semantic tools:
	* Actor
	* Axiomatic
	* Big-Step Operational
	* Denotational
	* Hoare Logic
	* Join Calculus
	* Lambda Calculus
	* Operational
	* Pi Calculus
	* Small-Step Operational
* Add the ability to translate between different semantics.
	
